name: Publish Python distributions to PyPI and TestPyPI
on:
  pull_request:
    branches:
      - "*"

jobs:

  build-manylinux-arm64:
    name: Build manylinux wheels (Python3.X ARM64)
    runs-on: ubuntu-24.04-arm
    env:
      CIBW_PLATFORM: 'linux'
      CIBW_ARCHS: 'aarch64'
      CIBW_BUILD: 'cp38-manylinux_aarch64 cp39-manylinux_aarch64 cp310-manylinux_aarch64 cp311-manylinux_aarch64 cp312-manylinux_aarch64 cp313-manylinux_aarch64'
      CIBW_SKIP: '{cp,pp}3{6,7}*'
      CIBW_MANYLINUX_AARCH64_IMAGE: "supportbot900/pypibuilders:manylinux_arm64"
      CIBW_MANYLINUX_PYPY_AARCH64_IMAGE: "supportbot900/pypibuilders:manylinux_arm64"
      VCPKG_ROOT: "/vcpkg"
    steps:
      - uses: actions/checkout@master
        with:
          submodules: recursive
      - name: build wheels
        uses: pypa/cibuildwheel@v2.21.1
      - uses: actions/upload-artifact@v4
        with:
          name: manylinux-arm64
          path: wheelhouse/*.whl

  build-mac-3_X-arm:
    name: Build macOS wheels (Python3.X ARM64)
    runs-on: macos-latest
    env:
      CIBW_PLATFORM: 'macos'
      CIBW_ARCHS: 'arm64'
      CIBW_BUILD: 'cp38-macosx_arm64 cp39-macosx_arm64 cp310-macosx_arm64 cp311-macosx_arm64 cp312-macosx_arm64 cp313-macosx_arm64'
      CIBW_SKIP: '{cp,pp}3{6,7}*'
      VCPKG_ROOT: "${{ github.workspace }}/vcpkg"
      VCPKG_TARGET_TRIPLET: 'arm64-osx'
      VCPKG_DEFAULT_TRIPLET: 'arm64-osx'
      CMAKE_GENERATOR: 'Ninja'
      CMAKE_MAKE_PROGRAM: '/opt/homebrew/bin/ninja'
      CC: '/usr/bin/clang'
      CXX: '/usr/bin/clang++'
      CMAKE_C_COMPILER: '/usr/bin/clang'
      CMAKE_CXX_COMPILER: '/usr/bin/clang++'
    steps:
      - uses: actions/checkout@master
        with:
          submodules: recursive
      - name: Install build tools
        run: |
          brew update
          brew install ninja patchelf
          echo "CMake path: $(which cmake)"
          echo "Ninja path: $(which ninja)"
          echo "Clang path: $(which clang)"
          echo "Clang++ path: $(which clang++)"
          echo "Make path: $(which make)"
          echo "Patchelf path: $(which patchelf)"
          cmake --version
          clang --version
          ninja --version
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: 'latest'
      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgGitCommitId: '8f54ef5453e7e76ff01e15988bf243e7247c5eb5'
          vcpkgDirectory: 'vcpkg'
      - name: build wheels
        uses: pypa/cibuildwheel@v2.21.1
        env:
          CIBW_BEFORE_BUILD: >
            brew update &&
            brew install ninja patchelf &&
            export CMAKE_GENERATOR=Ninja &&
            export CMAKE_MAKE_PROGRAM=/opt/homebrew/bin/ninja &&
            export CC=/usr/bin/clang &&
            export CXX=/usr/bin/clang++ &&
            export CMAKE_C_COMPILER=/usr/bin/clang &&
            export CMAKE_CXX_COMPILER=/usr/bin/clang++ &&
            export CMAKE_SYSTEM_NAME=Darwin &&
            export VCPKG_TARGET_TRIPLET=arm64-osx &&
            export VCPKG_DEFAULT_TRIPLET=arm64-osx &&
            export VCPKG_FORCE_SYSTEM_BINARIES=1 &&
            export PATH="/opt/homebrew/bin:$PATH" &&
            echo "Patchelf version: $(patchelf --version)" &&
            echo "Ninja version: $(ninja --version)" &&
            echo "CMake version: $(cmake --version)" &&
            echo "Clang version: $(clang --version)" &&
            echo "VCPKG_TARGET_TRIPLET: $VCPKG_TARGET_TRIPLET"
          CIBW_ENVIRONMENT: >
            CMAKE_GENERATOR=Ninja
            CMAKE_MAKE_PROGRAM=/opt/homebrew/bin/ninja
            CC=/usr/bin/clang
            CXX=/usr/bin/clang++
            CMAKE_C_COMPILER=/usr/bin/clang
            CMAKE_CXX_COMPILER=/usr/bin/clang++
            CMAKE_SYSTEM_NAME=Darwin
            VCPKG_TARGET_TRIPLET=arm64-osx
            VCPKG_DEFAULT_TRIPLET=arm64-osx
            VCPKG_FORCE_SYSTEM_BINARIES=1
      - uses: actions/upload-artifact@v4
        with:
          name: mac-3_X-arm
          path: wheelhouse/*.whl

  upload:
    name: Publish to PyPI
    runs-on: ubuntu-24.04-arm
    needs: [build-manylinux-arm64, build-mac-3_X-arm]
    steps:
      - name: Create ./dist
        run: mkdir ./dist
      - uses: actions/download-artifact@v4
        with:
          name: manylinux-arm64
          path: dist
      - uses: actions/download-artifact@v4
        with:
          name: mac-3_X-arm
          path: dist
      - name: Publish distribution to PyPI
        run: |
          python -m pip install --upgrade pip
          pip install packaging==25.0
          pip install twine
          python -m twine upload --username __token__ --password ${{ secrets.PYPI_API_TOKEN }} dist/*
        env:
          PYTHONPATH: /usr/local/lib/python3.8/site-packages
